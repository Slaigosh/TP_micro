
TP_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002268  08002268  00012268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800228c  0800228c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800228c  0800228c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800228c  0800228c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800228c  0800228c  0001228c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002290  08002290  00012290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000014  080022a8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080022a8  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000097f9  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002529  00000000  00000000  00029878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf8  00000000  00000000  0002bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000099d  00000000  00000000  0002caa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014626  00000000  00000000  0002d43d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dfb2  00000000  00000000  00041a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00073e35  00000000  00000000  0004fa15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c08  00000000  00000000  000c384c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000c6454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002250 	.word	0x08002250

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002250 	.word	0x08002250

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <LL_ADC_SetCommonFrequencyMode>:
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_HIGH
  *         @arg @ref LL_ADC_CLOCK_FREQ_MODE_LOW
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonFrequencyMode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonFrequencyMode)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_LFMEN, CommonFrequencyMode);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a05      	ldr	r2, [pc, #20]	; (8000244 <LL_ADC_SetCommonFrequencyMode+0x24>)
 8000230:	401a      	ands	r2, r3
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	431a      	orrs	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	b002      	add	sp, #8
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	fdffffff 	.word	0xfdffffff

08000248 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	2207      	movs	r2, #7
 8000258:	4393      	bics	r3, r2
 800025a:	001a      	movs	r2, r3
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	431a      	orrs	r2, r3
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	615a      	str	r2, [r3, #20]
}
 8000264:	46c0      	nop			; (mov r8, r8)
 8000266:	46bd      	mov	sp, r7
 8000268:	b002      	add	sp, #8
 800026a:	bd80      	pop	{r7, pc}

0800026c <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	2204      	movs	r2, #4
 800027c:	4393      	bics	r3, r2
 800027e:	001a      	movs	r2, r3
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	431a      	orrs	r2, r3
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	60da      	str	r2, [r3, #12]
}
 8000288:	46c0      	nop			; (mov r8, r8)
 800028a:	46bd      	mov	sp, r7
 800028c:	b002      	add	sp, #8
 800028e:	bd80      	pop	{r7, pc}

08000290 <LL_ADC_REG_SetSequencerChAdd>:
  *
  *         (1) On STM32L0, parameter not available on all devices: only on STM32L053xx, STM32L063xx, STM32L073xx, STM32L083xx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	035b      	lsls	r3, r3, #13
 80002a2:	0b5b      	lsrs	r3, r3, #13
 80002a4:	431a      	orrs	r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	b002      	add	sp, #8
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_DISABLE
  *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b082      	sub	sp, #8
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_OVSE, OvsScope);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	691b      	ldr	r3, [r3, #16]
 80002c0:	2201      	movs	r2, #1
 80002c2:	4393      	bics	r3, r2
 80002c4:	001a      	movs	r2, r3
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	431a      	orrs	r2, r3
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]
}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	46bd      	mov	sp, r7
 80002d2:	b002      	add	sp, #8
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a05      	ldr	r2, [pc, #20]	; (80002fc <LL_ADC_EnableInternalRegulator+0x24>)
 80002e6:	4013      	ands	r3, r2
 80002e8:	2280      	movs	r2, #128	; 0x80
 80002ea:	0552      	lsls	r2, r2, #21
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	b002      	add	sp, #8
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	6fffffe8 	.word	0x6fffffe8

08000300 <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	2204      	movs	r2, #4
 800030e:	4393      	bics	r3, r2
 8000310:	001a      	movs	r2, r3
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	605a      	str	r2, [r3, #4]
}
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	46bd      	mov	sp, r7
 800031a:	b002      	add	sp, #8
 800031c:	bd80      	pop	{r7, pc}

0800031e <LL_ADC_DisableIT_EOS>:
  * @rmtoll IER      EOSEQIE        LL_ADC_DisableIT_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b082      	sub	sp, #8
 8000322:	af00      	add	r7, sp, #0
 8000324:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	2208      	movs	r2, #8
 800032c:	4393      	bics	r3, r2
 800032e:	001a      	movs	r2, r3
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	605a      	str	r2, [r3, #4]
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b002      	add	sp, #8
 800033a:	bd80      	pop	{r7, pc}

0800033c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <LL_APB2_GRP1_EnableClock+0x28>)
 8000346:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <LL_APB2_GRP1_EnableClock+0x28>)
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	430a      	orrs	r2, r1
 800034e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <LL_APB2_GRP1_EnableClock+0x28>)
 8000352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000354:	687a      	ldr	r2, [r7, #4]
 8000356:	4013      	ands	r3, r2
 8000358:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800035a:	68fb      	ldr	r3, [r7, #12]
}
 800035c:	46c0      	nop			; (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	b004      	add	sp, #16
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40021000 	.word	0x40021000

08000368 <LL_IOP_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <LL_IOP_GRP1_EnableClock+0x28>)
 8000372:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <LL_IOP_GRP1_EnableClock+0x28>)
 8000376:	687a      	ldr	r2, [r7, #4]
 8000378:	430a      	orrs	r2, r1
 800037a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <LL_IOP_GRP1_EnableClock+0x28>)
 800037e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	4013      	ands	r3, r2
 8000384:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000386:	68fb      	ldr	r3, [r7, #12]
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b004      	add	sp, #16
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000

08000394 <MX_ADC_Init>:

/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000394:	b5b0      	push	{r4, r5, r7, lr}
 8000396:	b090      	sub	sp, #64	; 0x40
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800039a:	2428      	movs	r4, #40	; 0x28
 800039c:	193b      	adds	r3, r7, r4
 800039e:	0018      	movs	r0, r3
 80003a0:	2314      	movs	r3, #20
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f001 ff27 	bl	80021f8 <memset>
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80003aa:	2518      	movs	r5, #24
 80003ac:	197b      	adds	r3, r7, r5
 80003ae:	0018      	movs	r0, r3
 80003b0:	2310      	movs	r3, #16
 80003b2:	001a      	movs	r2, r3
 80003b4:	2100      	movs	r1, #0
 80003b6:	f001 ff1f 	bl	80021f8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	003b      	movs	r3, r7
 80003bc:	0018      	movs	r0, r3
 80003be:	2318      	movs	r3, #24
 80003c0:	001a      	movs	r2, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	f001 ff18 	bl	80021f8 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80003c8:	2380      	movs	r3, #128	; 0x80
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	0018      	movs	r0, r3
 80003ce:	f7ff ffb5 	bl	800033c <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 80003d2:	2001      	movs	r0, #1
 80003d4:	f7ff ffc8 	bl	8000368 <LL_IOP_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA1   ------> ADC_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80003d8:	003b      	movs	r3, r7
 80003da:	2202      	movs	r2, #2
 80003dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80003de:	003b      	movs	r3, r7
 80003e0:	2203      	movs	r2, #3
 80003e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80003e4:	003b      	movs	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ea:	003a      	movs	r2, r7
 80003ec:	23a0      	movs	r3, #160	; 0xa0
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 fb97 	bl	8001b26 <LL_GPIO_Init>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 80003f8:	4a36      	ldr	r2, [pc, #216]	; (80004d4 <MX_ADC_Init+0x140>)
 80003fa:	4b37      	ldr	r3, [pc, #220]	; (80004d8 <MX_ADC_Init+0x144>)
 80003fc:	0011      	movs	r1, r2
 80003fe:	0018      	movs	r0, r3
 8000400:	f7ff ff46 	bl	8000290 <LL_ADC_REG_SetSequencerChAdd>

  /** Common config
  */
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000404:	0021      	movs	r1, r4
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800040c:	187b      	adds	r3, r7, r1
 800040e:	2200      	movs	r2, #0
 8000410:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8000412:	187b      	adds	r3, r7, r1
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2200      	movs	r2, #0
 800041c:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000424:	187b      	adds	r3, r7, r1
 8000426:	4a2c      	ldr	r2, [pc, #176]	; (80004d8 <MX_ADC_Init+0x144>)
 8000428:	0019      	movs	r1, r3
 800042a:	0010      	movs	r0, r2
 800042c:	f001 fa90 	bl	8001950 <LL_ADC_REG_Init>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8000430:	4b29      	ldr	r3, [pc, #164]	; (80004d8 <MX_ADC_Init+0x144>)
 8000432:	2100      	movs	r1, #0
 8000434:	0018      	movs	r0, r3
 8000436:	f7ff ff07 	bl	8000248 <LL_ADC_SetSamplingTimeCommonChannels>
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 800043a:	4b27      	ldr	r3, [pc, #156]	; (80004d8 <MX_ADC_Init+0x144>)
 800043c:	2100      	movs	r1, #0
 800043e:	0018      	movs	r0, r3
 8000440:	f7ff ff37 	bl	80002b2 <LL_ADC_SetOverSamplingScope>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000444:	4b24      	ldr	r3, [pc, #144]	; (80004d8 <MX_ADC_Init+0x144>)
 8000446:	2100      	movs	r1, #0
 8000448:	0018      	movs	r0, r3
 800044a:	f7ff ff0f 	bl	800026c <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetCommonFrequencyMode(__LL_ADC_COMMON_INSTANCE(ADC1), LL_ADC_CLOCK_FREQ_MODE_HIGH);
 800044e:	4b23      	ldr	r3, [pc, #140]	; (80004dc <MX_ADC_Init+0x148>)
 8000450:	2100      	movs	r1, #0
 8000452:	0018      	movs	r0, r3
 8000454:	f7ff fee4 	bl	8000220 <LL_ADC_SetCommonFrequencyMode>
  LL_ADC_DisableIT_EOC(ADC1);
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <MX_ADC_Init+0x144>)
 800045a:	0018      	movs	r0, r3
 800045c:	f7ff ff50 	bl	8000300 <LL_ADC_DisableIT_EOC>
  LL_ADC_DisableIT_EOS(ADC1);
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <MX_ADC_Init+0x144>)
 8000462:	0018      	movs	r0, r3
 8000464:	f7ff ff5b 	bl	800031e <LL_ADC_DisableIT_EOS>
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV1;
 8000468:	197b      	adds	r3, r7, r5
 800046a:	22c0      	movs	r2, #192	; 0xc0
 800046c:	0612      	lsls	r2, r2, #24
 800046e:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000470:	197b      	adds	r3, r7, r5
 8000472:	2200      	movs	r2, #0
 8000474:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000476:	197b      	adds	r3, r7, r5
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800047c:	197b      	adds	r3, r7, r5
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000482:	197b      	adds	r3, r7, r5
 8000484:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <MX_ADC_Init+0x144>)
 8000486:	0019      	movs	r1, r3
 8000488:	0010      	movs	r0, r2
 800048a:	f001 fa2b 	bl	80018e4 <LL_ADC_Init>

  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_ADC_Init+0x144>)
 8000490:	0018      	movs	r0, r3
 8000492:	f7ff ff21 	bl	80002d8 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_ADC_Init+0x14c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4912      	ldr	r1, [pc, #72]	; (80004e4 <MX_ADC_Init+0x150>)
 800049c:	0018      	movs	r0, r3
 800049e:	f7ff fe33 	bl	8000108 <__udivsi3>
 80004a2:	0003      	movs	r3, r0
 80004a4:	001a      	movs	r2, r3
 80004a6:	0013      	movs	r3, r2
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	189b      	adds	r3, r3, r2
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	210a      	movs	r1, #10
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff fe29 	bl	8000108 <__udivsi3>
 80004b6:	0003      	movs	r3, r0
 80004b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 80004ba:	e002      	b.n	80004c2 <MX_ADC_Init+0x12e>
  {
    wait_loop_index--;
 80004bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004be:	3b01      	subs	r3, #1
 80004c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  while(wait_loop_index != 0)
 80004c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f9      	bne.n	80004bc <MX_ADC_Init+0x128>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b010      	add	sp, #64	; 0x40
 80004d0:	bdb0      	pop	{r4, r5, r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	04000002 	.word	0x04000002
 80004d8:	40012400 	.word	0x40012400
 80004dc:	40012708 	.word	0x40012708
 80004e0:	20000008 	.word	0x20000008
 80004e4:	00030d40 	.word	0x00030d40

080004e8 <LL_IOP_GRP1_EnableClock>:
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_IOP_GRP1_EnableClock+0x28>)
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	430a      	orrs	r2, r1
 80004fa:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <LL_IOP_GRP1_EnableClock+0x28>)
 80004fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4013      	ands	r3, r2
 8000504:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000506:	68fb      	ldr	r3, [r7, #12]
}
 8000508:	46c0      	nop			; (mov r8, r8)
 800050a:	46bd      	mov	sp, r7
 800050c:	b004      	add	sp, #16
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000

08000514 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}

0800052c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	003b      	movs	r3, r7
 8000534:	0018      	movs	r0, r3
 8000536:	2318      	movs	r3, #24
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f001 fe5c 	bl	80021f8 <memset>

  /* GPIO Ports Clock Enable */
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000540:	2001      	movs	r0, #1
 8000542:	f7ff ffd1 	bl	80004e8 <LL_IOP_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(DAC_nLDAC_GPIO_Port, DAC_nLDAC_Pin);
 8000546:	23a0      	movs	r3, #160	; 0xa0
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	2108      	movs	r1, #8
 800054c:	0018      	movs	r0, r3
 800054e:	f7ff ffe1 	bl	8000514 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = DAC_nLDAC_Pin;
 8000552:	003b      	movs	r3, r7
 8000554:	2208      	movs	r2, #8
 8000556:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000558:	003b      	movs	r3, r7
 800055a:	2201      	movs	r2, #1
 800055c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800055e:	003b      	movs	r3, r7
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000564:	003b      	movs	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800056a:	003b      	movs	r3, r7
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(DAC_nLDAC_GPIO_Port, &GPIO_InitStruct);
 8000570:	003a      	movs	r2, r7
 8000572:	23a0      	movs	r3, #160	; 0xa0
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f001 fad4 	bl	8001b26 <LL_GPIO_Init>

}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b006      	add	sp, #24
 8000584:	bd80      	pop	{r7, pc}

08000586 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b082      	sub	sp, #8
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2201      	movs	r2, #1
 8000594:	431a      	orrs	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	601a      	str	r2, [r3, #0]
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b082      	sub	sp, #8
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b002      	add	sp, #8
 80005b8:	bd80      	pop	{r7, pc}

080005ba <LedStart>:
} Led_info;

static Led_info info = {.current_value = 0, .increment_val = 1};

void LedStart(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM2);
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	0018      	movs	r0, r3
 80005c4:	f7ff ffdf 	bl	8000586 <LL_TIM_EnableCounter>
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <LedSetValue>:

// value entre 0 et 255
void LedSetValue(uint8_t value)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	0002      	movs	r2, r0
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	701a      	strb	r2, [r3, #0]
	LL_TIM_OC_SetCompareCH1(TIM2,(uint32_t)value);
 80005dc:	1dfb      	adds	r3, r7, #7
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	0011      	movs	r1, r2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff ffdb 	bl	80005a2 <LL_TIM_OC_SetCompareCH1>
	info.current_value = value;
 80005ec:	1dfb      	adds	r3, r7, #7
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b02      	ldr	r3, [pc, #8]	; (80005fc <LedSetValue+0x2c>)
 80005f2:	601a      	str	r2, [r3, #0]
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b002      	add	sp, #8
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000000 	.word	0x20000000

08000600 <LedPulse>:

void LedPulse(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	info.current_value += info.increment_val;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <LedPulse+0x44>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <LedPulse+0x44>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	18d2      	adds	r2, r2, r3
 800060e:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <LedPulse+0x44>)
 8000610:	601a      	str	r2, [r3, #0]
	if(info.current_value == 255) info.increment_val = -1;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <LedPulse+0x44>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2bff      	cmp	r3, #255	; 0xff
 8000618:	d104      	bne.n	8000624 <LedPulse+0x24>
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <LedPulse+0x44>)
 800061c:	2201      	movs	r2, #1
 800061e:	4252      	negs	r2, r2
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	e006      	b.n	8000632 <LedPulse+0x32>
	else if(info.current_value == 0) info.increment_val = 1;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <LedPulse+0x44>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <LedPulse+0x32>
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <LedPulse+0x44>)
 800062e:	2201      	movs	r2, #1
 8000630:	605a      	str	r2, [r3, #4]
	LedSetValue(info.current_value);
 8000632:	4b04      	ldr	r3, [pc, #16]	; (8000644 <LedPulse+0x44>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff ffc9 	bl	80005d0 <LedSetValue>
}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000000 	.word	0x20000000

08000648 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <LL_RCC_HSI_Enable+0x18>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <LL_RCC_HSI_Enable+0x18>)
 8000652:	2101      	movs	r1, #1
 8000654:	430a      	orrs	r2, r1
 8000656:	601a      	str	r2, [r3, #0]
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40021000 	.word	0x40021000

08000664 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <LL_RCC_HSI_IsReady+0x1c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2204      	movs	r2, #4
 800066e:	4013      	ands	r3, r2
 8000670:	2b04      	cmp	r3, #4
 8000672:	d101      	bne.n	8000678 <LL_RCC_HSI_IsReady+0x14>
 8000674:	2301      	movs	r3, #1
 8000676:	e000      	b.n	800067a <LL_RCC_HSI_IsReady+0x16>
 8000678:	2300      	movs	r3, #0
}
 800067a:	0018      	movs	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000

08000684 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000692:	4013      	ands	r3, r2
 8000694:	0019      	movs	r1, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	021a      	lsls	r2, r3, #8
 800069a:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800069c:	430a      	orrs	r2, r1
 800069e:	605a      	str	r2, [r3, #4]
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b002      	add	sp, #8
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	ffffe0ff 	.word	0xffffe0ff

080006b0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <LL_RCC_SetSysClkSource+0x24>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	2203      	movs	r2, #3
 80006be:	4393      	bics	r3, r2
 80006c0:	0019      	movs	r1, r3
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <LL_RCC_SetSysClkSource+0x24>)
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	430a      	orrs	r2, r1
 80006c8:	60da      	str	r2, [r3, #12]
}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	46bd      	mov	sp, r7
 80006ce:	b002      	add	sp, #8
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	40021000 	.word	0x40021000

080006d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <LL_RCC_GetSysClkSource+0x14>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	220c      	movs	r2, #12
 80006e2:	4013      	ands	r3, r2
}
 80006e4:	0018      	movs	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40021000 	.word	0x40021000

080006f0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <LL_RCC_SetAHBPrescaler+0x24>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	22f0      	movs	r2, #240	; 0xf0
 80006fe:	4393      	bics	r3, r2
 8000700:	0019      	movs	r1, r3
 8000702:	4b04      	ldr	r3, [pc, #16]	; (8000714 <LL_RCC_SetAHBPrescaler+0x24>)
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	430a      	orrs	r2, r1
 8000708:	60da      	str	r2, [r3, #12]
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	40021000 	.word	0x40021000

08000718 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	4a06      	ldr	r2, [pc, #24]	; (8000740 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000726:	4013      	ands	r3, r2
 8000728:	0019      	movs	r1, r3
 800072a:	4b04      	ldr	r3, [pc, #16]	; (800073c <LL_RCC_SetAPB1Prescaler+0x24>)
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	430a      	orrs	r2, r1
 8000730:	60da      	str	r2, [r3, #12]
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	40021000 	.word	0x40021000
 8000740:	fffff8ff 	.word	0xfffff8ff

08000744 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <LL_RCC_SetAPB2Prescaler+0x24>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <LL_RCC_SetAPB2Prescaler+0x28>)
 8000752:	4013      	ands	r3, r2
 8000754:	0019      	movs	r1, r3
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	430a      	orrs	r2, r1
 800075c:	60da      	str	r2, [r3, #12]
}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	40021000 	.word	0x40021000
 800076c:	ffffc7ff 	.word	0xffffc7ff

08000770 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <LL_RCC_SetUSARTClockSource+0x2c>)
 800077a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	0c12      	lsrs	r2, r2, #16
 8000780:	43d2      	mvns	r2, r2
 8000782:	401a      	ands	r2, r3
 8000784:	0011      	movs	r1, r2
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	041b      	lsls	r3, r3, #16
 800078a:	0c1a      	lsrs	r2, r3, #16
 800078c:	4b03      	ldr	r3, [pc, #12]	; (800079c <LL_RCC_SetUSARTClockSource+0x2c>)
 800078e:	430a      	orrs	r2, r1
 8000790:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000

080007a0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <LL_FLASH_SetLatency+0x24>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2201      	movs	r2, #1
 80007ae:	4393      	bics	r3, r2
 80007b0:	0019      	movs	r1, r3
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <LL_FLASH_SetLatency+0x24>)
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	430a      	orrs	r2, r1
 80007b8:	601a      	str	r2, [r3, #0]
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	40022000 	.word	0x40022000

080007c8 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <LL_FLASH_GetLatency+0x14>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2201      	movs	r2, #1
 80007d2:	4013      	ands	r3, r2
}
 80007d4:	0018      	movs	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	40022000 	.word	0x40022000

080007e0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a06      	ldr	r2, [pc, #24]	; (8000808 <LL_PWR_SetRegulVoltageScaling+0x28>)
 80007ee:	4013      	ands	r3, r2
 80007f0:	0019      	movs	r1, r3
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	601a      	str	r2, [r3, #0]
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b002      	add	sp, #8
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	40007000 	.word	0x40007000
 8000808:	ffffe7ff 	.word	0xffffe7ff

0800080c <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOSF       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <LL_PWR_IsActiveFlag_VOS+0x1c>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2210      	movs	r2, #16
 8000816:	4013      	ands	r3, r2
 8000818:	3b10      	subs	r3, #16
 800081a:	425a      	negs	r2, r3
 800081c:	4153      	adcs	r3, r2
 800081e:	b2db      	uxtb	r3, r3
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	40007000 	.word	0x40007000

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 fb24 	bl	8000e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f812 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f7ff fe78 	bl	800052c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800083c:	f000 fa64 	bl	8000d08 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000840:	f7ff fda8 	bl	8000394 <MX_ADC_Init>
  MX_SPI1_Init();
 8000844:	f000 f894 	bl	8000970 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000848:	f000 f95a 	bl	8000b00 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LedStart();
 800084c:	f7ff feb5 	bl	80005ba <LedStart>
  while (1)
  {
	  LedPulse();
 8000850:	f7ff fed6 	bl	8000600 <LedPulse>
	  LL_mDelay(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f001 fc9f 	bl	8002198 <LL_mDelay>
	  LedPulse();
 800085a:	e7f9      	b.n	8000850 <main+0x24>

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff ff9d 	bl	80007a0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	f7ff ffae 	bl	80007c8 <LL_FLASH_GetLatency>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d1fb      	bne.n	8000868 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff ffb3 	bl	80007e0 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	f7ff ffc6 	bl	800080c <LL_PWR_IsActiveFlag_VOS>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d1fb      	bne.n	800087c <SystemClock_Config+0x20>
  {
  }
  LL_RCC_HSI_Enable();
 8000884:	f7ff fee0 	bl	8000648 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	f7ff feeb 	bl	8000664 <LL_RCC_HSI_IsReady>
 800088e:	0003      	movs	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	d1fa      	bne.n	800088a <SystemClock_Config+0x2e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000894:	2010      	movs	r0, #16
 8000896:	f7ff fef5 	bl	8000684 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ff28 	bl	80006f0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff ff39 	bl	8000718 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff ff4c 	bl	8000744 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f7ff feff 	bl	80006b0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	f7ff ff10 	bl	80006d8 <LL_RCC_GetSysClkSource>
 80008b8:	0003      	movs	r3, r0
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d1fa      	bne.n	80008b4 <SystemClock_Config+0x58>
  {

  }
  LL_SetSystemCoreClock(16000000);
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <SystemClock_Config+0x88>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 fc8b 	bl	80021dc <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80008c6:	2003      	movs	r0, #3
 80008c8:	f000 faf8 	bl	8000ebc <HAL_InitTick>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008d0:	f000 f80a 	bl	80008e8 <Error_Handler>
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80008d4:	23c0      	movs	r3, #192	; 0xc0
 80008d6:	031b      	lsls	r3, r3, #12
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff ff49 	bl	8000770 <LL_RCC_SetUSARTClockSource>
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	00f42400 	.word	0x00f42400

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <Error_Handler+0x8>
	...

080008f4 <LL_APB2_GRP1_EnableClock>:
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <LL_APB2_GRP1_EnableClock+0x28>)
 80008fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <LL_APB2_GRP1_EnableClock+0x28>)
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	430a      	orrs	r2, r1
 8000906:	635a      	str	r2, [r3, #52]	; 0x34
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <LL_APB2_GRP1_EnableClock+0x28>)
 800090a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	4013      	ands	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000912:	68fb      	ldr	r3, [r7, #12]
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b004      	add	sp, #16
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000

08000920 <LL_IOP_GRP1_EnableClock>:
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <LL_IOP_GRP1_EnableClock+0x28>)
 800092a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <LL_IOP_GRP1_EnableClock+0x28>)
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	430a      	orrs	r2, r1
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000934:	4b04      	ldr	r3, [pc, #16]	; (8000948 <LL_IOP_GRP1_EnableClock+0x28>)
 8000936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	4013      	ands	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800093e:	68fb      	ldr	r3, [r7, #12]
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b004      	add	sp, #16
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021000 	.word	0x40021000

0800094c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2210      	movs	r2, #16
 800095c:	4393      	bics	r3, r2
 800095e:	001a      	movs	r2, r3
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	431a      	orrs	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	605a      	str	r2, [r3, #4]
}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}

08000970 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b091      	sub	sp, #68	; 0x44
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000976:	2418      	movs	r4, #24
 8000978:	193b      	adds	r3, r7, r4
 800097a:	0018      	movs	r0, r3
 800097c:	2328      	movs	r3, #40	; 0x28
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f001 fc39 	bl	80021f8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	003b      	movs	r3, r7
 8000988:	0018      	movs	r0, r3
 800098a:	2318      	movs	r3, #24
 800098c:	001a      	movs	r2, r3
 800098e:	2100      	movs	r1, #0
 8000990:	f001 fc32 	bl	80021f8 <memset>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	015b      	lsls	r3, r3, #5
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff ffab 	bl	80008f4 <LL_APB2_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff ffbe 	bl	8000920 <LL_IOP_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA4   ------> SPI1_NSS
  PA5   ------> SPI1_SCK
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80009a4:	003b      	movs	r3, r7
 80009a6:	2210      	movs	r2, #16
 80009a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009aa:	003b      	movs	r3, r7
 80009ac:	2202      	movs	r2, #2
 80009ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	003b      	movs	r3, r7
 80009b2:	2203      	movs	r2, #3
 80009b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009b6:	003b      	movs	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009bc:	003b      	movs	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80009c2:	003b      	movs	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	003a      	movs	r2, r7
 80009ca:	23a0      	movs	r3, #160	; 0xa0
 80009cc:	05db      	lsls	r3, r3, #23
 80009ce:	0011      	movs	r1, r2
 80009d0:	0018      	movs	r0, r3
 80009d2:	f001 f8a8 	bl	8001b26 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80009d6:	003b      	movs	r3, r7
 80009d8:	2220      	movs	r2, #32
 80009da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009dc:	003b      	movs	r3, r7
 80009de:	2202      	movs	r2, #2
 80009e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	003b      	movs	r3, r7
 80009e4:	2203      	movs	r2, #3
 80009e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80009e8:	003b      	movs	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80009ee:	003b      	movs	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 80009f4:	003b      	movs	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	003a      	movs	r2, r7
 80009fc:	23a0      	movs	r3, #160	; 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	0011      	movs	r1, r2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 f88f 	bl	8001b26 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000a08:	003b      	movs	r3, r7
 8000a0a:	2280      	movs	r2, #128	; 0x80
 8000a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2202      	movs	r2, #2
 8000a12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a14:	003b      	movs	r3, r7
 8000a16:	2203      	movs	r2, #3
 8000a18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a1a:	003b      	movs	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a20:	003b      	movs	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000a26:	003b      	movs	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	003a      	movs	r2, r7
 8000a2e:	23a0      	movs	r3, #160	; 0xa0
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f001 f876 	bl	8001b26 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_HALF_DUPLEX_TX;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	22c0      	movs	r2, #192	; 0xc0
 8000a3e:	0212      	lsls	r2, r2, #8
 8000a40:	601a      	str	r2, [r3, #0]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2282      	movs	r2, #130	; 0x82
 8000a46:	0052      	lsls	r2, r2, #1
 8000a48:	605a      	str	r2, [r3, #4]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000a4a:	0021      	movs	r1, r4
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	02d2      	lsls	r2, r2, #11
 8000a64:	615a      	str	r2, [r3, #20]
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  SPI_InitStruct.CRCPoly = 7;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2207      	movs	r2, #7
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <MX_SPI1_Init+0x12c>)
 8000a82:	0019      	movs	r1, r3
 8000a84:	0010      	movs	r0, r2
 8000a86:	f001 fa63 	bl	8001f50 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <MX_SPI1_Init+0x12c>)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff ff5c 	bl	800094c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b011      	add	sp, #68	; 0x44
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	40013000 	.word	0x40013000

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa4:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <HAL_MspInit+0x24>)
 8000aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_MspInit+0x24>)
 8000aaa:	2101      	movs	r1, #1
 8000aac:	430a      	orrs	r2, r1
 8000aae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <HAL_MspInit+0x24>)
 8000ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_MspInit+0x24>)
 8000ab6:	2180      	movs	r1, #128	; 0x80
 8000ab8:	0549      	lsls	r1, r1, #21
 8000aba:	430a      	orrs	r2, r1
 8000abc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 fa1a 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b06:	2310      	movs	r3, #16
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	001a      	movs	r2, r3
 8000b10:	2100      	movs	r1, #0
 8000b12:	f001 fb71 	bl	80021f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b16:	003b      	movs	r3, r7
 8000b18:	0018      	movs	r0, r3
 8000b1a:	2310      	movs	r3, #16
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f001 fb6a 	bl	80021f8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <MX_TIM2_Init+0xbc>)
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	05d2      	lsls	r2, r2, #23
 8000b2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15744;
 8000b2c:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <MX_TIM2_Init+0xbc>)
 8000b2e:	22f6      	movs	r2, #246	; 0xf6
 8000b30:	0192      	lsls	r2, r2, #6
 8000b32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b34:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <MX_TIM2_Init+0xbc>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000b3a:	4b20      	ldr	r3, [pc, #128]	; (8000bbc <MX_TIM2_Init+0xbc>)
 8000b3c:	22ff      	movs	r2, #255	; 0xff
 8000b3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b40:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <MX_TIM2_Init+0xbc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <MX_TIM2_Init+0xbc>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_TIM2_Init+0xbc>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 fc14 	bl	800137c <HAL_TIM_PWM_Init>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b58:	f7ff fec6 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5c:	2110      	movs	r1, #16
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6a:	187a      	adds	r2, r7, r1
 8000b6c:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_TIM2_Init+0xbc>)
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 fe57 	bl	8001824 <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000b7a:	f7ff feb5 	bl	80008e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7e:	003b      	movs	r3, r7
 8000b80:	2260      	movs	r2, #96	; 0x60
 8000b82:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b84:	003b      	movs	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b90:	003b      	movs	r3, r7
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b96:	0039      	movs	r1, r7
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_TIM2_Init+0xbc>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 fc2d 	bl	80013fc <HAL_TIM_PWM_ConfigChannel>
 8000ba2:	1e03      	subs	r3, r0, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000ba6:	f7ff fe9f 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <MX_TIM2_Init+0xbc>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 f81d 	bl	8000bec <HAL_TIM_MspPostInit>

}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b006      	add	sp, #24
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	20000030 	.word	0x20000030

08000bc0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	05db      	lsls	r3, r3, #23
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d105      	bne.n	8000be0 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <HAL_TIM_PWM_MspInit+0x28>)
 8000bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_TIM_PWM_MspInit+0x28>)
 8000bda:	2101      	movs	r1, #1
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b002      	add	sp, #8
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40021000 	.word	0x40021000

08000bec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	240c      	movs	r4, #12
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	2314      	movs	r3, #20
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	f001 fafa 	bl	80021f8 <memset>
  if(timHandle->Instance==TIM2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d123      	bne.n	8000c58 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HAL_TIM_MspPostInit+0x74>)
 8000c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_TIM_MspPostInit+0x74>)
 8000c16:	2101      	movs	r1, #1
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_TIM_MspPostInit+0x74>)
 8000c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c20:	2201      	movs	r2, #1
 8000c22:	4013      	ands	r3, r2
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA8     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	0052      	lsls	r2, r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	0021      	movs	r1, r4
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2202      	movs	r2, #2
 8000c36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2205      	movs	r2, #5
 8000c48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	187a      	adds	r2, r7, r1
 8000c4c:	23a0      	movs	r3, #160	; 0xa0
 8000c4e:	05db      	lsls	r3, r3, #23
 8000c50:	0011      	movs	r1, r2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fa2c 	bl	80010b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b009      	add	sp, #36	; 0x24
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	40021000 	.word	0x40021000

08000c64 <LL_APB1_GRP1_EnableClock>:
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <LL_APB1_GRP1_EnableClock+0x28>)
 8000c6e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <LL_APB1_GRP1_EnableClock+0x28>)
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	430a      	orrs	r2, r1
 8000c76:	639a      	str	r2, [r3, #56]	; 0x38
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <LL_APB1_GRP1_EnableClock+0x28>)
 8000c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b004      	add	sp, #16
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000

08000c90 <LL_IOP_GRP1_EnableClock>:
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000c9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <LL_IOP_GRP1_EnableClock+0x28>)
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	687a      	ldr	r2, [r7, #4]
 8000caa:	4013      	ands	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b004      	add	sp, #16
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000

08000cbc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	601a      	str	r2, [r3, #0]
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <LL_USART_ConfigAsyncMode+0x2c>)
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	222a      	movs	r2, #42	; 0x2a
 8000cf2:	4393      	bics	r3, r2
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	ffffb7ff 	.word	0xffffb7ff

08000d08 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b08f      	sub	sp, #60	; 0x3c
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d0e:	241c      	movs	r4, #28
 8000d10:	193b      	adds	r3, r7, r4
 8000d12:	0018      	movs	r0, r3
 8000d14:	231c      	movs	r3, #28
 8000d16:	001a      	movs	r2, r3
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f001 fa6d 	bl	80021f8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	0018      	movs	r0, r3
 8000d22:	2318      	movs	r3, #24
 8000d24:	001a      	movs	r2, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	f001 fa66 	bl	80021f8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	029b      	lsls	r3, r3, #10
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff ff97 	bl	8000c64 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff ffaa 	bl	8000c90 <LL_IOP_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA0-CK_IN   ------> USART2_RX
  PA2   ------> USART2_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2202      	movs	r2, #2
 8000d46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	1d3a      	adds	r2, r7, #4
 8000d62:	23a0      	movs	r3, #160	; 0xa0
 8000d64:	05db      	lsls	r3, r3, #23
 8000d66:	0011      	movs	r1, r2
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 fedc 	bl	8001b26 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2204      	movs	r2, #4
 8000d72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2202      	movs	r2, #2
 8000d78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2204      	movs	r2, #4
 8000d90:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	1d3a      	adds	r2, r7, #4
 8000d94:	23a0      	movs	r3, #160	; 0xa0
 8000d96:	05db      	lsls	r3, r3, #23
 8000d98:	0011      	movs	r1, r2
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 fec3 	bl	8001b26 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	22e1      	movs	r2, #225	; 0xe1
 8000da4:	0252      	lsls	r2, r2, #9
 8000da6:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000da8:	0021      	movs	r1, r4
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART2, &USART_InitStruct);
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <MX_USART2_UART_Init+0xec>)
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	0010      	movs	r0, r2
 8000dd6:	f001 f987 	bl	80020e8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_USART2_UART_Init+0xec>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff ff7b 	bl	8000cd8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <MX_USART2_UART_Init+0xec>)
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff ff69 	bl	8000cbc <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b00f      	add	sp, #60	; 0x3c
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	40004400 	.word	0x40004400

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000df8:	4813      	ldr	r0, [pc, #76]	; (8000e48 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000dfa:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dfc:	f7ff fe7b 	bl	8000af6 <SystemInit>

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8000e00:	4812      	ldr	r0, [pc, #72]	; (8000e4c <LoopForever+0x6>)
    LDR R1, [R0]
 8000e02:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000e04:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <LoopForever+0xa>)
    CMP R1, R2
 8000e08:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000e0a:	d105      	bne.n	8000e18 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8000e0c:	4811      	ldr	r0, [pc, #68]	; (8000e54 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000e0e:	4912      	ldr	r1, [pc, #72]	; (8000e58 <LoopForever+0x12>)
    STR R1, [R0]
 8000e10:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000e12:	4812      	ldr	r0, [pc, #72]	; (8000e5c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000e14:	4912      	ldr	r1, [pc, #72]	; (8000e60 <LoopForever+0x1a>)
    STR R1, [R0]
 8000e16:	6001      	str	r1, [r0, #0]

08000e18 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e18:	4812      	ldr	r0, [pc, #72]	; (8000e64 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000e1a:	4913      	ldr	r1, [pc, #76]	; (8000e68 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000e1c:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <LoopForever+0x26>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e20:	e002      	b.n	8000e28 <LoopCopyDataInit>

08000e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e26:	3304      	adds	r3, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e2c:	d3f9      	bcc.n	8000e22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e2e:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000e30:	4c10      	ldr	r4, [pc, #64]	; (8000e74 <LoopForever+0x2e>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e34:	e001      	b.n	8000e3a <LoopFillZerobss>

08000e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e38:	3204      	adds	r2, #4

08000e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e3c:	d3fb      	bcc.n	8000e36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e3e:	f001 f9e3 	bl	8002208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e42:	f7ff fcf3 	bl	800082c <main>

08000e46 <LoopForever>:

LoopForever:
    b LoopForever
 8000e46:	e7fe      	b.n	8000e46 <LoopForever>
   ldr   r0, =_estack
 8000e48:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000e4c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000e50:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000e54:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8000e58:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000e5c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000e60:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e6c:	08002294 	.word	0x08002294
  ldr r2, =_sbss
 8000e70:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e74:	20000074 	.word	0x20000074

08000e78 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_COMP_IRQHandler>
	...

08000e7c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e82:	1dfb      	adds	r3, r7, #7
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x3c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Init+0x3c>)
 8000e8e:	2140      	movs	r1, #64	; 0x40
 8000e90:	430a      	orrs	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f811 	bl	8000ebc <HAL_InitTick>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e001      	b.n	8000eaa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea6:	f7ff fdfb 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
}
 8000eae:	0018      	movs	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b002      	add	sp, #8
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	40022000 	.word	0x40022000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_InitTick+0x5c>)
 8000ec6:	681c      	ldr	r4, [r3, #0]
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_InitTick+0x60>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	0019      	movs	r1, r3
 8000ece:	23fa      	movs	r3, #250	; 0xfa
 8000ed0:	0098      	lsls	r0, r3, #2
 8000ed2:	f7ff f919 	bl	8000108 <__udivsi3>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	0019      	movs	r1, r3
 8000eda:	0020      	movs	r0, r4
 8000edc:	f7ff f914 	bl	8000108 <__udivsi3>
 8000ee0:	0003      	movs	r3, r0
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f000 f8d7 	bl	8001096 <HAL_SYSTICK_Config>
 8000ee8:	1e03      	subs	r3, r0, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e00f      	b.n	8000f10 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d80b      	bhi.n	8000f0e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	425b      	negs	r3, r3
 8000efc:	2200      	movs	r2, #0
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 f8b4 	bl	800106c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_InitTick+0x64>)
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	0018      	movs	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	b003      	add	sp, #12
 8000f16:	bd90      	pop	{r4, r7, pc}
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000010 	.word	0x20000010
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_IncTick+0x1c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	001a      	movs	r2, r3
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <HAL_IncTick+0x20>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	18d2      	adds	r2, r2, r3
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_IncTick+0x20>)
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	20000010 	.word	0x20000010
 8000f44:	20000070 	.word	0x20000070

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b590      	push	{r4, r7, lr}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	0002      	movs	r2, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f5c:	d828      	bhi.n	8000fb0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f5e:	4a2f      	ldr	r2, [pc, #188]	; (800101c <__NVIC_SetPriority+0xd4>)
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	33c0      	adds	r3, #192	; 0xc0
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	589b      	ldr	r3, [r3, r2]
 8000f6e:	1dfa      	adds	r2, r7, #7
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	0011      	movs	r1, r2
 8000f74:	2203      	movs	r2, #3
 8000f76:	400a      	ands	r2, r1
 8000f78:	00d2      	lsls	r2, r2, #3
 8000f7a:	21ff      	movs	r1, #255	; 0xff
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	000a      	movs	r2, r1
 8000f80:	43d2      	mvns	r2, r2
 8000f82:	401a      	ands	r2, r3
 8000f84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	019b      	lsls	r3, r3, #6
 8000f8a:	22ff      	movs	r2, #255	; 0xff
 8000f8c:	401a      	ands	r2, r3
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0018      	movs	r0, r3
 8000f94:	2303      	movs	r3, #3
 8000f96:	4003      	ands	r3, r0
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f9c:	481f      	ldr	r0, [pc, #124]	; (800101c <__NVIC_SetPriority+0xd4>)
 8000f9e:	1dfb      	adds	r3, r7, #7
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b25b      	sxtb	r3, r3
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	33c0      	adds	r3, #192	; 0xc0
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fae:	e031      	b.n	8001014 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <__NVIC_SetPriority+0xd8>)
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	230f      	movs	r3, #15
 8000fba:	400b      	ands	r3, r1
 8000fbc:	3b08      	subs	r3, #8
 8000fbe:	089b      	lsrs	r3, r3, #2
 8000fc0:	3306      	adds	r3, #6
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	18d3      	adds	r3, r2, r3
 8000fc6:	3304      	adds	r3, #4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1dfa      	adds	r2, r7, #7
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	0011      	movs	r1, r2
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	400a      	ands	r2, r1
 8000fd4:	00d2      	lsls	r2, r2, #3
 8000fd6:	21ff      	movs	r1, #255	; 0xff
 8000fd8:	4091      	lsls	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	43d2      	mvns	r2, r2
 8000fde:	401a      	ands	r2, r3
 8000fe0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	22ff      	movs	r2, #255	; 0xff
 8000fe8:	401a      	ands	r2, r3
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	0018      	movs	r0, r3
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	4003      	ands	r3, r0
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <__NVIC_SetPriority+0xd8>)
 8000ffa:	1dfb      	adds	r3, r7, #7
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	001c      	movs	r4, r3
 8001000:	230f      	movs	r3, #15
 8001002:	4023      	ands	r3, r4
 8001004:	3b08      	subs	r3, #8
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	430a      	orrs	r2, r1
 800100a:	3306      	adds	r3, #6
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	18c3      	adds	r3, r0, r3
 8001010:	3304      	adds	r3, #4
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b003      	add	sp, #12
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	045b      	lsls	r3, r3, #17
 8001034:	429a      	cmp	r2, r3
 8001036:	d301      	bcc.n	800103c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001038:	2301      	movs	r3, #1
 800103a:	e010      	b.n	800105e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <SysTick_Config+0x44>)
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	3a01      	subs	r2, #1
 8001042:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001044:	2301      	movs	r3, #1
 8001046:	425b      	negs	r3, r3
 8001048:	2103      	movs	r1, #3
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff ff7c 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SysTick_Config+0x44>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SysTick_Config+0x44>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b002      	add	sp, #8
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	210f      	movs	r1, #15
 8001078:	187b      	adds	r3, r7, r1
 800107a:	1c02      	adds	r2, r0, #0
 800107c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	187b      	adds	r3, r7, r1
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b25b      	sxtb	r3, r3
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b004      	add	sp, #16
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff ffbf 	bl	8001024 <SysTick_Config>
 80010a6:	0003      	movs	r3, r0
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010c6:	e143      	b.n	8001350 <HAL_GPIO_Init+0x2a0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4091      	lsls	r1, r2
 80010d2:	000a      	movs	r2, r1
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d100      	bne.n	80010e0 <HAL_GPIO_Init+0x30>
 80010de:	e134      	b.n	800134a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2203      	movs	r2, #3
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d005      	beq.n	80010f8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2203      	movs	r2, #3
 80010f2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d130      	bne.n	800115a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	409a      	lsls	r2, r3
 8001106:	0013      	movs	r3, r2
 8001108:	43da      	mvns	r2, r3
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	409a      	lsls	r2, r3
 800111a:	0013      	movs	r3, r2
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800112e:	2201      	movs	r2, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	2201      	movs	r2, #1
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2203      	movs	r2, #3
 8001160:	4013      	ands	r3, r2
 8001162:	2b03      	cmp	r3, #3
 8001164:	d017      	beq.n	8001196 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	409a      	lsls	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	43da      	mvns	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	4013      	ands	r3, r2
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d123      	bne.n	80011ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	58d3      	ldr	r3, [r2, r3]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	2207      	movs	r2, #7
 80011b4:	4013      	ands	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	409a      	lsls	r2, r3
 80011bc:	0013      	movs	r3, r2
 80011be:	43da      	mvns	r2, r3
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2107      	movs	r1, #7
 80011ce:	400b      	ands	r3, r1
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	6939      	ldr	r1, [r7, #16]
 80011e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2203      	movs	r2, #3
 8001208:	401a      	ands	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	23c0      	movs	r3, #192	; 0xc0
 8001224:	029b      	lsls	r3, r3, #10
 8001226:	4013      	ands	r3, r2
 8001228:	d100      	bne.n	800122c <HAL_GPIO_Init+0x17c>
 800122a:	e08e      	b.n	800134a <HAL_GPIO_Init+0x29a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122c:	4b4e      	ldr	r3, [pc, #312]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 800122e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001230:	4b4d      	ldr	r3, [pc, #308]	; (8001368 <HAL_GPIO_Init+0x2b8>)
 8001232:	2101      	movs	r1, #1
 8001234:	430a      	orrs	r2, r1
 8001236:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001238:	4a4c      	ldr	r2, [pc, #304]	; (800136c <HAL_GPIO_Init+0x2bc>)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	589b      	ldr	r3, [r3, r2]
 8001244:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2203      	movs	r2, #3
 800124a:	4013      	ands	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	409a      	lsls	r2, r3
 8001252:	0013      	movs	r3, r2
 8001254:	43da      	mvns	r2, r3
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	23a0      	movs	r3, #160	; 0xa0
 8001260:	05db      	lsls	r3, r3, #23
 8001262:	429a      	cmp	r2, r3
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x1d2>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a41      	ldr	r2, [pc, #260]	; (8001370 <HAL_GPIO_Init+0x2c0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x1ce>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a40      	ldr	r2, [pc, #256]	; (8001374 <HAL_GPIO_Init+0x2c4>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x1ca>
 8001276:	2302      	movs	r3, #2
 8001278:	e004      	b.n	8001284 <HAL_GPIO_Init+0x1d4>
 800127a:	2306      	movs	r3, #6
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x1d4>
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_GPIO_Init+0x1d4>
 8001282:	2300      	movs	r3, #0
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	2103      	movs	r1, #3
 8001288:	400a      	ands	r2, r1
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	4093      	lsls	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001294:	4935      	ldr	r1, [pc, #212]	; (800136c <HAL_GPIO_Init+0x2bc>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <HAL_GPIO_Init+0x2c8>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43da      	mvns	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	035b      	lsls	r3, r3, #13
 80012ba:	4013      	ands	r3, r2
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x216>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012c6:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <HAL_GPIO_Init+0x2c8>)
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012cc:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <HAL_GPIO_Init+0x2c8>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43da      	mvns	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	039b      	lsls	r3, r3, #14
 80012e4:	4013      	ands	r3, r2
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x240>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <HAL_GPIO_Init+0x2c8>)
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_GPIO_Init+0x2c8>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43da      	mvns	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	029b      	lsls	r3, r3, #10
 800130e:	4013      	ands	r3, r2
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <HAL_GPIO_Init+0x2c8>)
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_GPIO_Init+0x2c8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43da      	mvns	r2, r3
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	025b      	lsls	r3, r3, #9
 8001338:	4013      	ands	r3, r2
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_GPIO_Init+0x2c8>)
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	40da      	lsrs	r2, r3
 8001358:	1e13      	subs	r3, r2, #0
 800135a:	d000      	beq.n	800135e <HAL_GPIO_Init+0x2ae>
 800135c:	e6b4      	b.n	80010c8 <HAL_GPIO_Init+0x18>
  }
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b006      	add	sp, #24
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000
 8001370:	50000400 	.word	0x50000400
 8001374:	50000800 	.word	0x50000800
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e032      	b.n	80013f4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2239      	movs	r2, #57	; 0x39
 8001392:	5c9b      	ldrb	r3, [r3, r2]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d107      	bne.n	80013aa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2238      	movs	r2, #56	; 0x38
 800139e:	2100      	movs	r1, #0
 80013a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff fc0b 	bl	8000bc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2239      	movs	r2, #57	; 0x39
 80013ae:	2102      	movs	r1, #2
 80013b0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	0019      	movs	r1, r3
 80013bc:	0010      	movs	r0, r2
 80013be:	f000 f8e3 	bl	8001588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	223e      	movs	r2, #62	; 0x3e
 80013c6:	2101      	movs	r1, #1
 80013c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	223a      	movs	r2, #58	; 0x3a
 80013ce:	2101      	movs	r1, #1
 80013d0:	5499      	strb	r1, [r3, r2]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	223b      	movs	r2, #59	; 0x3b
 80013d6:	2101      	movs	r1, #1
 80013d8:	5499      	strb	r1, [r3, r2]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	223c      	movs	r2, #60	; 0x3c
 80013de:	2101      	movs	r1, #1
 80013e0:	5499      	strb	r1, [r3, r2]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	223d      	movs	r2, #61	; 0x3d
 80013e6:	2101      	movs	r1, #1
 80013e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2239      	movs	r2, #57	; 0x39
 80013ee:	2101      	movs	r1, #1
 80013f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	0018      	movs	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	b002      	add	sp, #8
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001408:	2317      	movs	r3, #23
 800140a:	18fb      	adds	r3, r7, r3
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2238      	movs	r2, #56	; 0x38
 8001414:	5c9b      	ldrb	r3, [r3, r2]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <HAL_TIM_PWM_ConfigChannel+0x22>
 800141a:	2302      	movs	r3, #2
 800141c:	e0ad      	b.n	800157a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2238      	movs	r2, #56	; 0x38
 8001422:	2101      	movs	r1, #1
 8001424:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	d100      	bne.n	800142e <HAL_TIM_PWM_ConfigChannel+0x32>
 800142c:	e076      	b.n	800151c <HAL_TIM_PWM_ConfigChannel+0x120>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0c      	cmp	r3, #12
 8001432:	d900      	bls.n	8001436 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001434:	e095      	b.n	8001562 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b08      	cmp	r3, #8
 800143a:	d04e      	beq.n	80014da <HAL_TIM_PWM_ConfigChannel+0xde>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b08      	cmp	r3, #8
 8001440:	d900      	bls.n	8001444 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001442:	e08e      	b.n	8001562 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_TIM_PWM_ConfigChannel+0x56>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d021      	beq.n	8001494 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001450:	e087      	b.n	8001562 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	0011      	movs	r1, r2
 800145a:	0018      	movs	r0, r3
 800145c:	f000 f8de 	bl	800161c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	699a      	ldr	r2, [r3, #24]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2108      	movs	r1, #8
 800146c:	430a      	orrs	r2, r1
 800146e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699a      	ldr	r2, [r3, #24]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2104      	movs	r1, #4
 800147c:	438a      	bics	r2, r1
 800147e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6999      	ldr	r1, [r3, #24]
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	619a      	str	r2, [r3, #24]
      break;
 8001492:	e06b      	b.n	800156c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	0011      	movs	r1, r2
 800149c:	0018      	movs	r0, r3
 800149e:	f000 f8f9 	bl	8001694 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	0109      	lsls	r1, r1, #4
 80014b0:	430a      	orrs	r2, r1
 80014b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4931      	ldr	r1, [pc, #196]	; (8001584 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80014c0:	400a      	ands	r2, r1
 80014c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6999      	ldr	r1, [r3, #24]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	021a      	lsls	r2, r3, #8
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	619a      	str	r2, [r3, #24]
      break;
 80014d8:	e048      	b.n	800156c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	0011      	movs	r1, r2
 80014e2:	0018      	movs	r0, r3
 80014e4:	f000 f918 	bl	8001718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	69da      	ldr	r2, [r3, #28]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2108      	movs	r1, #8
 80014f4:	430a      	orrs	r2, r1
 80014f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	69da      	ldr	r2, [r3, #28]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2104      	movs	r1, #4
 8001504:	438a      	bics	r2, r1
 8001506:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	69d9      	ldr	r1, [r3, #28]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	61da      	str	r2, [r3, #28]
      break;
 800151a:	e027      	b.n	800156c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	0011      	movs	r1, r2
 8001524:	0018      	movs	r0, r3
 8001526:	f000 f937 	bl	8001798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	69da      	ldr	r2, [r3, #28]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	0109      	lsls	r1, r1, #4
 8001538:	430a      	orrs	r2, r1
 800153a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	69da      	ldr	r2, [r3, #28]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	490f      	ldr	r1, [pc, #60]	; (8001584 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001548:	400a      	ands	r2, r1
 800154a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	69d9      	ldr	r1, [r3, #28]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	021a      	lsls	r2, r3, #8
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	61da      	str	r2, [r3, #28]
      break;
 8001560:	e004      	b.n	800156c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001562:	2317      	movs	r3, #23
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
      break;
 800156a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2238      	movs	r2, #56	; 0x38
 8001570:	2100      	movs	r1, #0
 8001572:	5499      	strb	r1, [r3, r2]

  return status;
 8001574:	2317      	movs	r3, #23
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	781b      	ldrb	r3, [r3, #0]
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b006      	add	sp, #24
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	fffffbff 	.word	0xfffffbff

08001588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	05db      	lsls	r3, r3, #23
 800159e:	429a      	cmp	r2, r3
 80015a0:	d003      	beq.n	80015aa <TIM_Base_SetConfig+0x22>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a1b      	ldr	r2, [pc, #108]	; (8001614 <TIM_Base_SetConfig+0x8c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d108      	bne.n	80015bc <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2270      	movs	r2, #112	; 0x70
 80015ae:	4393      	bics	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	05db      	lsls	r3, r3, #23
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d003      	beq.n	80015ce <TIM_Base_SetConfig+0x46>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <TIM_Base_SetConfig+0x8c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d108      	bne.n	80015e0 <TIM_Base_SetConfig+0x58>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4a11      	ldr	r2, [pc, #68]	; (8001618 <TIM_Base_SetConfig+0x90>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2280      	movs	r2, #128	; 0x80
 80015e4:	4393      	bics	r3, r2
 80015e6:	001a      	movs	r2, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	615a      	str	r2, [r3, #20]
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b004      	add	sp, #16
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40010800 	.word	0x40010800
 8001618:	fffffcff 	.word	0xfffffcff

0800161c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	2201      	movs	r2, #1
 800162c:	4393      	bics	r3, r2
 800162e:	001a      	movs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2270      	movs	r2, #112	; 0x70
 800164a:	4393      	bics	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2203      	movs	r2, #3
 8001652:	4393      	bics	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2202      	movs	r2, #2
 8001664:	4393      	bics	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	4313      	orrs	r3, r2
 8001670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	621a      	str	r2, [r3, #32]
}
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b006      	add	sp, #24
 8001692:	bd80      	pop	{r7, pc}

08001694 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	2210      	movs	r2, #16
 80016a4:	4393      	bics	r3, r2
 80016a6:	001a      	movs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4a13      	ldr	r2, [pc, #76]	; (8001710 <TIM_OC2_SetConfig+0x7c>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4a12      	ldr	r2, [pc, #72]	; (8001714 <TIM_OC2_SetConfig+0x80>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2220      	movs	r2, #32
 80016de:	4393      	bics	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	621a      	str	r2, [r3, #32]
}
 8001708:	46c0      	nop			; (mov r8, r8)
 800170a:	46bd      	mov	sp, r7
 800170c:	b006      	add	sp, #24
 800170e:	bd80      	pop	{r7, pc}
 8001710:	ffff8fff 	.word	0xffff8fff
 8001714:	fffffcff 	.word	0xfffffcff

08001718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a1a      	ldr	r2, [pc, #104]	; (8001790 <TIM_OC3_SetConfig+0x78>)
 8001728:	401a      	ands	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2270      	movs	r2, #112	; 0x70
 8001744:	4393      	bics	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2203      	movs	r2, #3
 800174c:	4393      	bics	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <TIM_OC3_SetConfig+0x7c>)
 800175e:	4013      	ands	r3, r2
 8001760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	4313      	orrs	r3, r2
 800176c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	621a      	str	r2, [r3, #32]
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b006      	add	sp, #24
 800178e:	bd80      	pop	{r7, pc}
 8001790:	fffffeff 	.word	0xfffffeff
 8001794:	fffffdff 	.word	0xfffffdff

08001798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <TIM_OC4_SetConfig+0x7c>)
 80017a8:	401a      	ands	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4a15      	ldr	r2, [pc, #84]	; (8001818 <TIM_OC4_SetConfig+0x80>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4a14      	ldr	r2, [pc, #80]	; (800181c <TIM_OC4_SetConfig+0x84>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	4a10      	ldr	r2, [pc, #64]	; (8001820 <TIM_OC4_SetConfig+0x88>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	031b      	lsls	r3, r3, #12
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	621a      	str	r2, [r3, #32]
}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	b006      	add	sp, #24
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	ffffefff 	.word	0xffffefff
 8001818:	ffff8fff 	.word	0xffff8fff
 800181c:	fffffcff 	.word	0xfffffcff
 8001820:	ffffdfff 	.word	0xffffdfff

08001824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2238      	movs	r2, #56	; 0x38
 8001832:	5c9b      	ldrb	r3, [r3, r2]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d101      	bne.n	800183c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001838:	2302      	movs	r3, #2
 800183a:	e03d      	b.n	80018b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2238      	movs	r2, #56	; 0x38
 8001840:	2101      	movs	r1, #1
 8001842:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2239      	movs	r2, #57	; 0x39
 8001848:	2102      	movs	r1, #2
 800184a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2270      	movs	r2, #112	; 0x70
 8001860:	4393      	bics	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	05db      	lsls	r3, r3, #23
 800187e:	429a      	cmp	r2, r3
 8001880:	d004      	beq.n	800188c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d10c      	bne.n	80018a6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	4393      	bics	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	4313      	orrs	r3, r2
 800189c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2239      	movs	r2, #57	; 0x39
 80018aa:	2101      	movs	r1, #1
 80018ac:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2238      	movs	r2, #56	; 0x38
 80018b2:	2100      	movs	r1, #0
 80018b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	0018      	movs	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b004      	add	sp, #16
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40010800 	.word	0x40010800

080018c4 <LL_ADC_IsEnabled>:
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4013      	ands	r3, r2
 80018d4:	3b01      	subs	r3, #1
 80018d6:	425a      	negs	r2, r3
 80018d8:	4153      	adcs	r3, r2
 80018da:	b2db      	uxtb	r3, r3
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80018ee:	230f      	movs	r3, #15
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff ffe3 	bl	80018c4 <LL_ADC_IsEnabled>
 80018fe:	1e03      	subs	r3, r0, #0
 8001900:	d118      	bne.n	8001934 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	4a11      	ldr	r2, [pc, #68]	; (800194c <LL_ADC_Init+0x68>)
 8001908:	401a      	ands	r2, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	6859      	ldr	r1, [r3, #4]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4319      	orrs	r1, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	430b      	orrs	r3, r1
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	089a      	lsrs	r2, r3, #2
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	611a      	str	r2, [r3, #16]
 8001932:	e003      	b.n	800193c <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001934:	230f      	movs	r3, #15
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800193c:	230f      	movs	r3, #15
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	781b      	ldrb	r3, [r3, #0]
}
 8001942:	0018      	movs	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	b004      	add	sp, #16
 8001948:	bd80      	pop	{r7, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	ffff3fc7 	.word	0xffff3fc7

08001950 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800195a:	230f      	movs	r3, #15
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff ffad 	bl	80018c4 <LL_ADC_IsEnabled>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d115      	bne.n	800199a <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <LL_ADC_REG_Init+0x60>)
 8001974:	401a      	ands	r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	6819      	ldr	r1, [r3, #0]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4319      	orrs	r1, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4319      	orrs	r1, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	4319      	orrs	r1, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	430b      	orrs	r3, r1
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	e003      	b.n	80019a2 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800199a:	230f      	movs	r3, #15
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80019a2:	230f      	movs	r3, #15
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	781b      	ldrb	r3, [r3, #0]
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b004      	add	sp, #16
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	fffec23c 	.word	0xfffec23c

080019b4 <LL_GPIO_SetPinMode>:
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6819      	ldr	r1, [r3, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	435b      	muls	r3, r3
 80019c8:	001a      	movs	r2, r3
 80019ca:	0013      	movs	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	189b      	adds	r3, r3, r2
 80019d0:	43db      	mvns	r3, r3
 80019d2:	400b      	ands	r3, r1
 80019d4:	001a      	movs	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	435b      	muls	r3, r3
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	434b      	muls	r3, r1
 80019de:	431a      	orrs	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	601a      	str	r2, [r3, #0]
}
 80019e4:	46c0      	nop			; (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b004      	add	sp, #16
 80019ea:	bd80      	pop	{r7, pc}

080019ec <LL_GPIO_SetPinOutputType>:
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	43d2      	mvns	r2, r2
 8001a00:	401a      	ands	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	434b      	muls	r3, r1
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	605a      	str	r2, [r3, #4]
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b004      	add	sp, #16
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <LL_GPIO_SetPinSpeed>:
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDER_OSPEED0), ((Pin * Pin) * Speed));
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6899      	ldr	r1, [r3, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	435b      	muls	r3, r3
 8001a2a:	001a      	movs	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	189b      	adds	r3, r3, r2
 8001a32:	43db      	mvns	r3, r3
 8001a34:	400b      	ands	r3, r1
 8001a36:	001a      	movs	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	435b      	muls	r3, r3
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	434b      	muls	r3, r1
 8001a40:	431a      	orrs	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	609a      	str	r2, [r3, #8]
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b004      	add	sp, #16
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <LL_GPIO_SetPinPull>:
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	68d9      	ldr	r1, [r3, #12]
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	435b      	muls	r3, r3
 8001a62:	001a      	movs	r2, r3
 8001a64:	0013      	movs	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	189b      	adds	r3, r3, r2
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	001a      	movs	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	435b      	muls	r3, r3
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	434b      	muls	r3, r1
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	60da      	str	r2, [r3, #12]
}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b004      	add	sp, #16
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <LL_GPIO_SetAFPin_0_7>:
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a19      	ldr	r1, [r3, #32]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	435b      	muls	r3, r3
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	4353      	muls	r3, r2
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	435a      	muls	r2, r3
 8001aa2:	0013      	movs	r3, r2
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	400b      	ands	r3, r1
 8001aac:	001a      	movs	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	435b      	muls	r3, r3
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	434b      	muls	r3, r1
 8001ab6:	68b9      	ldr	r1, [r7, #8]
 8001ab8:	434b      	muls	r3, r1
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	434b      	muls	r3, r1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	621a      	str	r2, [r3, #32]
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b004      	add	sp, #16
 8001aca:	bd80      	pop	{r7, pc}

08001acc <LL_GPIO_SetAFPin_8_15>:
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	0a12      	lsrs	r2, r2, #8
 8001ae4:	4353      	muls	r3, r2
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	0a12      	lsrs	r2, r2, #8
 8001aea:	4353      	muls	r3, r2
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	0a12      	lsrs	r2, r2, #8
 8001af0:	435a      	muls	r2, r3
 8001af2:	0013      	movs	r3, r2
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	43db      	mvns	r3, r3
 8001afa:	400b      	ands	r3, r1
 8001afc:	001a      	movs	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	0a09      	lsrs	r1, r1, #8
 8001b06:	434b      	muls	r3, r1
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	0a09      	lsrs	r1, r1, #8
 8001b0c:	434b      	muls	r3, r1
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	0a09      	lsrs	r1, r1, #8
 8001b12:	434b      	muls	r3, r1
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	434b      	muls	r3, r1
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b004      	add	sp, #16
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b084      	sub	sp, #16
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001b38:	e048      	b.n	8001bcc <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2101      	movs	r1, #1
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4091      	lsls	r1, r2
 8001b44:	000a      	movs	r2, r1
 8001b46:	4013      	ands	r3, r2
 8001b48:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d03a      	beq.n	8001bc6 <LL_GPIO_Init+0xa0>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d003      	beq.n	8001b60 <LL_GPIO_Init+0x3a>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d10e      	bne.n	8001b7e <LL_GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f7ff ff54 	bl	8001a16 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff ff37 	bl	80019ec <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	68b9      	ldr	r1, [r7, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7ff ff61 	bl	8001a4e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d111      	bne.n	8001bb8 <LL_GPIO_Init+0x92>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	d807      	bhi.n	8001baa <LL_GPIO_Init+0x84>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	68b9      	ldr	r1, [r7, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f7ff ff6f 	bl	8001a86 <LL_GPIO_SetAFPin_0_7>
 8001ba8:	e006      	b.n	8001bb8 <LL_GPIO_Init+0x92>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7ff ff8a 	bl	8001acc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff fef7 	bl	80019b4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	40da      	lsrs	r2, r3
 8001bd4:	1e13      	subs	r3, r2, #0
 8001bd6:	d1b0      	bne.n	8001b3a <LL_GPIO_Init+0x14>
  }


  return (SUCCESS);
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b004      	add	sp, #16
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <LL_RCC_HSI_IsReady>:
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <LL_RCC_HSI_IsReady+0x1c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2204      	movs	r2, #4
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d101      	bne.n	8001bf8 <LL_RCC_HSI_IsReady+0x14>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <LL_RCC_HSI_IsReady+0x16>
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000

08001c04 <LL_RCC_LSE_IsReady>:
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSERDY) == RCC_CSR_LSERDY) ? 1UL : 0UL);
 8001c08:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <LL_RCC_LSE_IsReady+0x24>)
 8001c0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	401a      	ands	r2, r3
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d101      	bne.n	8001c1e <LL_RCC_LSE_IsReady+0x1a>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <LL_RCC_LSE_IsReady+0x1c>
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	40021000 	.word	0x40021000

08001c2c <LL_RCC_MSI_GetRange>:
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <LL_RCC_MSI_GetRange+0x14>)
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	23e0      	movs	r3, #224	; 0xe0
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	4013      	ands	r3, r2
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40021000 	.word	0x40021000

08001c44 <LL_RCC_GetSysClkSource>:
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <LL_RCC_GetSysClkSource+0x14>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	4013      	ands	r3, r2
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	40021000 	.word	0x40021000

08001c5c <LL_RCC_GetAHBPrescaler>:
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <LL_RCC_GetAHBPrescaler+0x14>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	22f0      	movs	r2, #240	; 0xf0
 8001c66:	4013      	ands	r3, r2
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	40021000 	.word	0x40021000

08001c74 <LL_RCC_GetAPB1Prescaler>:
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	23e0      	movs	r3, #224	; 0xe0
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4013      	ands	r3, r2
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000

08001c8c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART2_CLKSOURCE_LSE
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <LL_RCC_GetUSARTClockSource+0x20>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	4313      	orrs	r3, r2
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	40021000 	.word	0x40021000

08001cb0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <LL_RCC_PLL_GetMainSource+0x14>)
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	025b      	lsls	r3, r3, #9
 8001cbc:	4013      	ands	r3, r2
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	23f0      	movs	r3, #240	; 0xf0
 8001cd2:	039b      	lsls	r3, r3, #14
 8001cd4:	4013      	ands	r3, r2
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <LL_RCC_PLL_GetDivider+0x14>)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	23c0      	movs	r3, #192	; 0xc0
 8001cea:	041b      	lsls	r3, r3, #16
 8001cec:	4013      	ands	r3, r2
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <LL_RCC_IsActiveFlag_HSIDIV>:
  * @brief  Check if HSI Divider is enabled (it divides by 4)
  * @rmtoll CR        HSIDIVF        LL_RCC_IsActiveFlag_HSIDIV
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HSIDIV(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIDIVF) == RCC_CR_HSIDIVF) ? 1UL : 0UL);
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <LL_RCC_IsActiveFlag_HSIDIV+0x1c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2210      	movs	r2, #16
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b10      	cmp	r3, #16
 8001d06:	d101      	bne.n	8001d0c <LL_RCC_IsActiveFlag_HSIDIV+0x14>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <LL_RCC_IsActiveFlag_HSIDIV+0x16>
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	0018      	movs	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40021000 	.word	0x40021000

08001d18 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RCC_CCIPR_USART1SEL  */

#if defined(RCC_CCIPR_USART2SEL)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d13c      	bne.n	8001da4 <LL_RCC_GetUSARTClockFreq+0x8c>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7ff ffad 	bl	8001c8c <LL_RCC_GetUSARTClockSource>
 8001d32:	0003      	movs	r3, r0
 8001d34:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <LL_RCC_GetUSARTClockFreq+0x98>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01c      	beq.n	8001d74 <LL_RCC_GetUSARTClockFreq+0x5c>
 8001d3a:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <LL_RCC_GetUSARTClockFreq+0x98>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d821      	bhi.n	8001d84 <LL_RCC_GetUSARTClockFreq+0x6c>
 8001d40:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <LL_RCC_GetUSARTClockFreq+0x9c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d003      	beq.n	8001d4e <LL_RCC_GetUSARTClockFreq+0x36>
 8001d46:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d005      	beq.n	8001d58 <LL_RCC_GetUSARTClockFreq+0x40>
 8001d4c:	e01a      	b.n	8001d84 <LL_RCC_GetUSARTClockFreq+0x6c>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001d4e:	f000 f839 	bl	8001dc4 <RCC_GetSystemClockFreq>
 8001d52:	0003      	movs	r3, r0
 8001d54:	60fb      	str	r3, [r7, #12]
        break;
 8001d56:	e025      	b.n	8001da4 <LL_RCC_GetUSARTClockFreq+0x8c>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001d58:	f7ff ff44 	bl	8001be4 <LL_RCC_HSI_IsReady>
 8001d5c:	1e03      	subs	r3, r0, #0
 8001d5e:	d01e      	beq.n	8001d9e <LL_RCC_GetUSARTClockFreq+0x86>
        {
          if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001d60:	f7ff ffca 	bl	8001cf8 <LL_RCC_IsActiveFlag_HSIDIV>
 8001d64:	1e03      	subs	r3, r0, #0
 8001d66:	d002      	beq.n	8001d6e <LL_RCC_GetUSARTClockFreq+0x56>
          {
            usart_frequency = (HSI_VALUE >> 2U);
 8001d68:	4b14      	ldr	r3, [pc, #80]	; (8001dbc <LL_RCC_GetUSARTClockFreq+0xa4>)
 8001d6a:	60fb      	str	r3, [r7, #12]
          else
          {
            usart_frequency = HSI_VALUE;
          }
        }
        break;
 8001d6c:	e017      	b.n	8001d9e <LL_RCC_GetUSARTClockFreq+0x86>
            usart_frequency = HSI_VALUE;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <LL_RCC_GetUSARTClockFreq+0xa8>)
 8001d70:	60fb      	str	r3, [r7, #12]
        break;
 8001d72:	e014      	b.n	8001d9e <LL_RCC_GetUSARTClockFreq+0x86>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001d74:	f7ff ff46 	bl	8001c04 <LL_RCC_LSE_IsReady>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d012      	beq.n	8001da2 <LL_RCC_GetUSARTClockFreq+0x8a>
        {
          usart_frequency = LSE_VALUE;
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001d82:	e00e      	b.n	8001da2 <LL_RCC_GetUSARTClockFreq+0x8a>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001d84:	f000 f81e 	bl	8001dc4 <RCC_GetSystemClockFreq>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f000 f85e 	bl	8001e4c <RCC_GetHCLKClockFreq>
 8001d90:	0003      	movs	r3, r0
 8001d92:	0018      	movs	r0, r3
 8001d94:	f000 f870 	bl	8001e78 <RCC_GetPCLK1ClockFreq>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	60fb      	str	r3, [r7, #12]
        break;
 8001d9c:	e002      	b.n	8001da4 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	e000      	b.n	8001da4 <LL_RCC_GetUSARTClockFreq+0x8c>
        break;
 8001da2:	46c0      	nop			; (mov r8, r8)
    }
  }
#endif /* RCC_CCIPR_USART2SEL */

  return usart_frequency;
 8001da4:	68fb      	ldr	r3, [r7, #12]
}
 8001da6:	0018      	movs	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b004      	add	sp, #16
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	000c000c 	.word	0x000c000c
 8001db4:	000c0004 	.word	0x000c0004
 8001db8:	000c0008 	.word	0x000c0008
 8001dbc:	003d0900 	.word	0x003d0900
 8001dc0:	00f42400 	.word	0x00f42400

08001dc4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001dca:	f7ff ff3b 	bl	8001c44 <LL_RCC_GetSysClkSource>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	d020      	beq.n	8001e16 <RCC_GetSystemClockFreq+0x52>
 8001dd4:	d824      	bhi.n	8001e20 <RCC_GetSystemClockFreq+0x5c>
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d01a      	beq.n	8001e10 <RCC_GetSystemClockFreq+0x4c>
 8001dda:	d821      	bhi.n	8001e20 <RCC_GetSystemClockFreq+0x5c>
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <RCC_GetSystemClockFreq+0x22>
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d00b      	beq.n	8001dfc <RCC_GetSystemClockFreq+0x38>
 8001de4:	e01c      	b.n	8001e20 <RCC_GetSystemClockFreq+0x5c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001de6:	f7ff ff21 	bl	8001c2c <LL_RCC_MSI_GetRange>
 8001dea:	0003      	movs	r3, r0
 8001dec:	0b5b      	lsrs	r3, r3, #13
 8001dee:	3301      	adds	r3, #1
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	0212      	lsls	r2, r2, #8
 8001df4:	409a      	lsls	r2, r3
 8001df6:	0013      	movs	r3, r2
 8001df8:	607b      	str	r3, [r7, #4]
      break;
 8001dfa:	e01c      	b.n	8001e36 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001dfc:	f7ff ff7c 	bl	8001cf8 <LL_RCC_IsActiveFlag_HSIDIV>
 8001e00:	1e03      	subs	r3, r0, #0
 8001e02:	d002      	beq.n	8001e0a <RCC_GetSystemClockFreq+0x46>
      {
        frequency = (HSI_VALUE >> 2U);
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <RCC_GetSystemClockFreq+0x7c>)
 8001e06:	607b      	str	r3, [r7, #4]
      }
      else
      {
        frequency = HSI_VALUE;
      }
      break;
 8001e08:	e015      	b.n	8001e36 <RCC_GetSystemClockFreq+0x72>
        frequency = HSI_VALUE;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <RCC_GetSystemClockFreq+0x80>)
 8001e0c:	607b      	str	r3, [r7, #4]
      break;
 8001e0e:	e012      	b.n	8001e36 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock source */
      frequency = HSE_VALUE;
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <RCC_GetSystemClockFreq+0x84>)
 8001e12:	607b      	str	r3, [r7, #4]
      break;
 8001e14:	e00f      	b.n	8001e36 <RCC_GetSystemClockFreq+0x72>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001e16:	f000 f843 	bl	8001ea0 <RCC_PLL_GetFreqDomain_SYS>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	607b      	str	r3, [r7, #4]
      break;
 8001e1e:	e00a      	b.n	8001e36 <RCC_GetSystemClockFreq+0x72>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001e20:	f7ff ff04 	bl	8001c2c <LL_RCC_MSI_GetRange>
 8001e24:	0003      	movs	r3, r0
 8001e26:	0b5b      	lsrs	r3, r3, #13
 8001e28:	3301      	adds	r3, #1
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	0212      	lsls	r2, r2, #8
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	0013      	movs	r3, r2
 8001e32:	607b      	str	r3, [r7, #4]
      break;
 8001e34:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001e36:	687b      	ldr	r3, [r7, #4]
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	003d0900 	.word	0x003d0900
 8001e44:	00f42400 	.word	0x00f42400
 8001e48:	007a1200 	.word	0x007a1200

08001e4c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001e54:	f7ff ff02 	bl	8001c5c <LL_RCC_GetAHBPrescaler>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	220f      	movs	r2, #15
 8001e5e:	4013      	ands	r3, r2
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <RCC_GetHCLKClockFreq+0x28>)
 8001e62:	5cd3      	ldrb	r3, [r2, r3]
 8001e64:	001a      	movs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	40d3      	lsrs	r3, r2
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b002      	add	sp, #8
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	08002268 	.word	0x08002268

08001e78 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001e80:	f7ff fef8 	bl	8001c74 <LL_RCC_GetAPB1Prescaler>
 8001e84:	0003      	movs	r3, r0
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <RCC_GetPCLK1ClockFreq+0x24>)
 8001e8a:	5cd3      	ldrb	r3, [r2, r3]
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	40d3      	lsrs	r3, r2
}
 8001e92:	0018      	movs	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b002      	add	sp, #8
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	08002278 	.word	0x08002278

08001ea0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001ea6:	f7ff ff03 	bl	8001cb0 <LL_RCC_PLL_GetMainSource>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <RCC_PLL_GetFreqDomain_SYS+0x28>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      if (LL_RCC_IsActiveFlag_HSIDIV() != 0U)
 8001eb4:	f7ff ff20 	bl	8001cf8 <LL_RCC_IsActiveFlag_HSIDIV>
 8001eb8:	1e03      	subs	r3, r0, #0
 8001eba:	d002      	beq.n	8001ec2 <RCC_PLL_GetFreqDomain_SYS+0x22>
      {
        pllinputfreq = (HSI_VALUE >> 2U);
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001ebe:	607b      	str	r3, [r7, #4]
      }
      else
      {
        pllinputfreq = HSI_VALUE;
      }
      break;
 8001ec0:	e005      	b.n	8001ece <RCC_PLL_GetFreqDomain_SYS+0x2e>
        pllinputfreq = HSI_VALUE;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8001ec4:	607b      	str	r3, [r7, #4]
      break;
 8001ec6:	e002      	b.n	8001ece <RCC_PLL_GetFreqDomain_SYS+0x2e>

    default:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001eca:	607b      	str	r3, [r7, #4]
      break;
 8001ecc:	46c0      	nop			; (mov r8, r8)
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8001ece:	f7ff fefb 	bl	8001cc8 <LL_RCC_PLL_GetMultiplicator>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	0c9b      	lsrs	r3, r3, #18
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001ed8:	5cd3      	ldrb	r3, [r2, r3]
 8001eda:	001a      	movs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4353      	muls	r3, r2
 8001ee0:	001c      	movs	r4, r3
 8001ee2:	f7ff fefd 	bl	8001ce0 <LL_RCC_PLL_GetDivider>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	0d9b      	lsrs	r3, r3, #22
 8001eea:	3301      	adds	r3, #1
 8001eec:	0019      	movs	r1, r3
 8001eee:	0020      	movs	r0, r4
 8001ef0:	f7fe f90a 	bl	8000108 <__udivsi3>
 8001ef4:	0003      	movs	r3, r0
}
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b003      	add	sp, #12
 8001efc:	bd90      	pop	{r4, r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	003d0900 	.word	0x003d0900
 8001f04:	00f42400 	.word	0x00f42400
 8001f08:	007a1200 	.word	0x007a1200
 8001f0c:	08002280 	.word	0x08002280

08001f10 <LL_SPI_IsEnabled>:
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2240      	movs	r2, #64	; 0x40
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b40      	cmp	r3, #64	; 0x40
 8001f22:	d101      	bne.n	8001f28 <LL_SPI_IsEnabled+0x18>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <LL_SPI_IsEnabled+0x1a>
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	001a      	movs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	611a      	str	r2, [r3, #16]
}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b002      	add	sp, #8
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001f5a:	230f      	movs	r3, #15
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	2201      	movs	r2, #1
 8001f60:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7ff ffd3 	bl	8001f10 <LL_SPI_IsEnabled>
 8001f6a:	1e03      	subs	r3, r0, #0
 8001f6c:	d13c      	bne.n	8001fe8 <LL_SPI_Init+0x98>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a21      	ldr	r2, [pc, #132]	; (8001ff8 <LL_SPI_Init+0xa8>)
 8001f74:	401a      	ands	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6819      	ldr	r1, [r3, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4319      	orrs	r1, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4319      	orrs	r1, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4319      	orrs	r1, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	4319      	orrs	r1, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	4319      	orrs	r1, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4319      	orrs	r1, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	4319      	orrs	r1, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	4393      	bics	r3, r2
 8001fb8:	001a      	movs	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	0c1b      	lsrs	r3, r3, #16
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	6a1a      	ldr	r2, [r3, #32]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	019b      	lsls	r3, r3, #6
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d106      	bne.n	8001fe0 <LL_SPI_Init+0x90>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	0011      	movs	r1, r2
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f7ff ffa9 	bl	8001f32 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8001fe8:	230f      	movs	r3, #15
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	781b      	ldrb	r3, [r3, #0]
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b004      	add	sp, #16
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	ffff0040 	.word	0xffff0040

08001ffc <LL_USART_IsEnabled>:
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <LL_USART_IsEnabled+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_USART_IsEnabled+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	0018      	movs	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	b002      	add	sp, #8
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <LL_USART_SetStopBitsLength>:
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <LL_USART_SetStopBitsLength+0x24>)
 8002030:	401a      	ands	r2, r3
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	605a      	str	r2, [r3, #4]
}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	46bd      	mov	sp, r7
 800203e:	b002      	add	sp, #8
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	ffffcfff 	.word	0xffffcfff

08002048 <LL_USART_SetHWFlowCtrl>:
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	4a05      	ldr	r2, [pc, #20]	; (800206c <LL_USART_SetHWFlowCtrl+0x24>)
 8002058:	401a      	ands	r2, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	609a      	str	r2, [r3, #8]
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	fffffcff 	.word	0xfffffcff

08002070 <LL_USART_SetBaudRate>:
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	429a      	cmp	r2, r3
 8002086:	d11c      	bne.n	80020c2 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	005a      	lsls	r2, r3, #1
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	085b      	lsrs	r3, r3, #1
 8002090:	18d3      	adds	r3, r2, r3
 8002092:	6839      	ldr	r1, [r7, #0]
 8002094:	0018      	movs	r0, r3
 8002096:	f7fe f837 	bl	8000108 <__udivsi3>
 800209a:	0003      	movs	r3, r0
 800209c:	b29b      	uxth	r3, r3
 800209e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <LL_USART_SetBaudRate+0x74>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	001a      	movs	r2, r3
 80020b0:	2307      	movs	r3, #7
 80020b2:	4013      	ands	r3, r2
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	60da      	str	r2, [r3, #12]
}
 80020c0:	e00c      	b.n	80020dc <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	085a      	lsrs	r2, r3, #1
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	18d3      	adds	r3, r2, r3
 80020ca:	6839      	ldr	r1, [r7, #0]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7fe f81b 	bl	8000108 <__udivsi3>
 80020d2:	0003      	movs	r3, r0
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	001a      	movs	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	60da      	str	r2, [r3, #12]
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b006      	add	sp, #24
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	0000fff0 	.word	0x0000fff0

080020e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80020f2:	230f      	movs	r3, #15
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff ff7b 	bl	8001ffc <LL_USART_IsEnabled>
 8002106:	1e03      	subs	r3, r0, #0
 8002108:	d13b      	bne.n	8002182 <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a20      	ldr	r2, [pc, #128]	; (8002190 <LL_USART_Init+0xa8>)
 8002110:	401a      	ands	r2, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	6859      	ldr	r1, [r3, #4]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4319      	orrs	r1, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	4319      	orrs	r1, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	430b      	orrs	r3, r1
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0011      	movs	r1, r2
 8002136:	0018      	movs	r0, r3
 8002138:	f7ff ff72 	bl	8002020 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	0011      	movs	r1, r2
 8002144:	0018      	movs	r0, r3
 8002146:	f7ff ff7f 	bl	8002048 <LL_USART_SetHWFlowCtrl>
    }
#endif /* USART1 */
#if defined(USART1)
    else if (USARTx == USART2)
#else
    if (USARTx == USART2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a11      	ldr	r2, [pc, #68]	; (8002194 <LL_USART_Init+0xac>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d104      	bne.n	800215c <LL_USART_Init+0x74>
#endif /* USART1 */
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002152:	200c      	movs	r0, #12
 8002154:	f7ff fde0 	bl	8001d18 <LL_RCC_GetUSARTClockFreq>
 8002158:	0003      	movs	r3, r0
 800215a:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00f      	beq.n	8002182 <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 800216a:	230f      	movs	r3, #15
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ff77 	bl	8002070 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002182:	230f      	movs	r3, #15
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	781b      	ldrb	r3, [r3, #0]
}
 8002188:	0018      	movs	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	b004      	add	sp, #16
 800218e:	bd80      	pop	{r7, pc}
 8002190:	efff69f3 	.word	0xefff69f3
 8002194:	40004400 	.word	0x40004400

08002198 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <LL_mDelay+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80021a6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3301      	adds	r3, #1
 80021ac:	d00c      	beq.n	80021c8 <LL_mDelay+0x30>
  {
    Delay++;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3301      	adds	r3, #1
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	e008      	b.n	80021c8 <LL_mDelay+0x30>
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <LL_mDelay+0x40>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	025b      	lsls	r3, r3, #9
 80021be:	4013      	ands	r3, r2
 80021c0:	d002      	beq.n	80021c8 <LL_mDelay+0x30>
    {
      Delay--;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
  while (Delay)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f3      	bne.n	80021b6 <LL_mDelay+0x1e>
    }
  }
}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	46c0      	nop			; (mov r8, r8)
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b004      	add	sp, #16
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	e000e010 	.word	0xe000e010

080021dc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <LL_SetSystemCoreClock+0x18>)
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	601a      	str	r2, [r3, #0]
}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b002      	add	sp, #8
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	20000008 	.word	0x20000008

080021f8 <memset>:
 80021f8:	0003      	movs	r3, r0
 80021fa:	1882      	adds	r2, r0, r2
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d100      	bne.n	8002202 <memset+0xa>
 8002200:	4770      	bx	lr
 8002202:	7019      	strb	r1, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	e7f9      	b.n	80021fc <memset+0x4>

08002208 <__libc_init_array>:
 8002208:	b570      	push	{r4, r5, r6, lr}
 800220a:	2600      	movs	r6, #0
 800220c:	4c0c      	ldr	r4, [pc, #48]	; (8002240 <__libc_init_array+0x38>)
 800220e:	4d0d      	ldr	r5, [pc, #52]	; (8002244 <__libc_init_array+0x3c>)
 8002210:	1b64      	subs	r4, r4, r5
 8002212:	10a4      	asrs	r4, r4, #2
 8002214:	42a6      	cmp	r6, r4
 8002216:	d109      	bne.n	800222c <__libc_init_array+0x24>
 8002218:	2600      	movs	r6, #0
 800221a:	f000 f819 	bl	8002250 <_init>
 800221e:	4c0a      	ldr	r4, [pc, #40]	; (8002248 <__libc_init_array+0x40>)
 8002220:	4d0a      	ldr	r5, [pc, #40]	; (800224c <__libc_init_array+0x44>)
 8002222:	1b64      	subs	r4, r4, r5
 8002224:	10a4      	asrs	r4, r4, #2
 8002226:	42a6      	cmp	r6, r4
 8002228:	d105      	bne.n	8002236 <__libc_init_array+0x2e>
 800222a:	bd70      	pop	{r4, r5, r6, pc}
 800222c:	00b3      	lsls	r3, r6, #2
 800222e:	58eb      	ldr	r3, [r5, r3]
 8002230:	4798      	blx	r3
 8002232:	3601      	adds	r6, #1
 8002234:	e7ee      	b.n	8002214 <__libc_init_array+0xc>
 8002236:	00b3      	lsls	r3, r6, #2
 8002238:	58eb      	ldr	r3, [r5, r3]
 800223a:	4798      	blx	r3
 800223c:	3601      	adds	r6, #1
 800223e:	e7f2      	b.n	8002226 <__libc_init_array+0x1e>
 8002240:	0800228c 	.word	0x0800228c
 8002244:	0800228c 	.word	0x0800228c
 8002248:	08002290 	.word	0x08002290
 800224c:	0800228c 	.word	0x0800228c

08002250 <_init>:
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002256:	bc08      	pop	{r3}
 8002258:	469e      	mov	lr, r3
 800225a:	4770      	bx	lr

0800225c <_fini>:
 800225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002262:	bc08      	pop	{r3}
 8002264:	469e      	mov	lr, r3
 8002266:	4770      	bx	lr
